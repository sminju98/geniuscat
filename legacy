const express = require('express');
const OpenAI = require('openai');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
require('dotenv').config();

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// API ÌÇ§ Î°úÎî© ÌôïÏù∏
console.log('API Key loaded:', !!process.env.OPENAI_API_KEY);
if (process.env.OPENAI_API_KEY) {
    console.log('API Key starts with:', process.env.OPENAI_API_KEY.substring(0, 10) + '...');
}

const app = express();

// JSON ÌååÏã±ÏùÑ ÏúÑÌïú ÎØ∏Îì§Ïõ®Ïñ¥
app.use(express.json({limit: '50mb'}));

// Ï†ïÏ†Å ÌååÏùº Ï†úÍ≥µ
app.use(express.static(path.join(__dirname)));

// Í∏∞Î≥∏ ÎùºÏö∞Ìä∏ - index.htmlÏùÑ ÏàòÏ†ïÌïòÏó¨ API ÌÇ§ Ï£ºÏûÖ
app.get('/', (req, res) => {
    fs.readFile(path.join(__dirname, 'index.html'), 'utf8', (err, data) => {
        if (err) {
            console.error('Error reading index.html:', err);
            return res.status(500).send('Error loading page');
        }

        // API ÌÇ§Î•º Ï£ºÏûÖÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏ Ï∂îÍ∞Ä
        const modifiedHtml = data.replace(
            '</head>',
            `<script>window.OPENAI_API_KEY = "${process.env.OPENAI_API_KEY}";</script></head>`
        );

        res.send(modifiedHtml);
    });
});

// Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/analyze-image', async (req, res) => {
    try {
        const { analysisType, imageData } = req.body;
        
        if (!imageData) {
            return res.status(400).json({ error: 'Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.' });
        }

        const isHusband = analysisType === 'husband';

        const prompt = isHusband ? 
            "ÎãπÏã†Ïùò ÎØ∏ÎûòÏùò ÎÇ®Ìé∏ÏùÑ ÏïåÎ†§Ï£ºÎäî Í¥ÄÏÉÅÍ∞ÄÏûÖÎãàÎã§. ÌòÑÏã§Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Îã§ÏñëÌïú ÌäπÏßïÏùÑ Í∞ÄÏßÑ ÏÇ¨ÎûåÏùÑ ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî:\n\nüíº ÏßÅÏóÖ: (IT Í∞úÎ∞úÏûê, Í∏àÏúµÍ∂å, ÍµêÏú°Í≥Ñ, Í≥µÎ¨¥Ïõê, ÏùòÎ£åÍ≥Ñ, Î≤ïÏ°∞Í≥Ñ, Í±¥ÏÑ§/Í±¥Ï∂ï, ÎîîÏûêÏù∏, ÎßàÏºÄÌåÖ, ÏöîÏãùÏóÖ Îì± ÌòÑÏã§Ï†ÅÏù∏ ÏßÅÏóÖÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî. Ïòà: 'Ïä§ÌÉÄÌä∏ÏóÖÏóêÏÑú Ïï± Í∞úÎ∞úÌïòÎäî iOS Í∞úÎ∞úÏûê', 'Ï¶ùÍ∂åÏÇ¨ÏóêÏÑú Ï£ºÏãù Î∂ÑÏÑùÌïòÎäî Ïï†ÎÑêÎ¶¨Ïä§Ìä∏')\nüë• Ïô∏Î™®: (Î∞òÎìúÏãú ÎÇ®Ïûê Ïó∞ÏòàÏù∏ÏúºÎ°úÎßå ÎπÑÏú†Ìï¥Ï£ºÏÑ∏Ïöî. ÏòàÏãú: Í≥µÏú†, Ïù¥Ï¢ÖÏÑù, ÏÜ°Ï§ëÍ∏∞, Ï∞®ÏùÄÏö∞, ÌòÑÎπà, Ïú†Ïû¨ÏÑù, Ïù¥ÏàòÍ∑º Îì±ÏùÑ ÏÉÅÌô©Ïóê ÎßûÍ≤å Ï°∞Ìï©)\nüé≠ MBTI: (ÏÑ±Í≤©Ïú†ÌòïÏùÑ Ïû¨ÎØ∏ÏûàÎäî ÏÉÅÌô©Ïù¥ÎÇò ÌñâÎèôÍ≥º Ïó∞Í≤∞Ìï¥ÏÑú ÌëúÌòÑÌï¥Ï£ºÏÑ∏Ïöî)\n‚ú® ÏÑ±Í≤©: (ÏßÅÏóÖÏù¥ÎÇò MBTIÏôÄ Ïó∞Í¥ÄÎêú ÎèÖÌäπÌïú ÏÑ±Í≤©ÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî)\nüéØ Ï∑®ÎØ∏: (ÏßÅÏóÖÏù¥ÎÇò ÏÑ±Í≤©Í≥º Ïñ¥Ïö∏Î¶¨Îäî ÌòÑÏã§Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Ïû¨ÎØ∏ÏûàÎäî Ï∑®ÎØ∏Î•º ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî)\nüíù Ïó∞Ïï† Ïä§ÌÉÄÏùº: (ÏÑ±Í≤©Ïù¥ÎÇò Ï∑®ÎØ∏ÏôÄ Ïó∞Í¥ÄÎêú ÎèÖÌäπÌïú Ïó∞Ïï† Ïä§ÌÉÄÏùºÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî)" :
            "ÎãπÏã†Ïùò ÎØ∏ÎûòÏùò ÏïÑÎÇ¥ÏûÖÎãàÎã§. ÌòÑÏã§Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Îã§ÏñëÌïú ÌäπÏßïÏùÑ Í∞ÄÏßÑ ÏÇ¨ÎûåÏùÑ ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî:\n\nüíº ÏßÅÏóÖ: (IT Í∞úÎ∞úÏûê, Í∏àÏúµÍ∂å, ÍµêÏú°Í≥Ñ, Í≥µÎ¨¥Ïõê, ÏùòÎ£åÍ≥Ñ, Î≤ïÏ°∞Í≥Ñ, Í±¥ÏÑ§/Í±¥Ï∂ï, ÎîîÏûêÏù∏, ÎßàÏºÄÌåÖ, ÏöîÏãùÏóÖ Îì± ÌòÑÏã§Ï†ÅÏù∏ ÏßÅÏóÖÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî. Ïòà: 'Í¥ëÍ≥†ÌöåÏÇ¨ÏóêÏÑú ÏùºÌïòÎäî ÌÅ¨Î¶¨ÏóêÏù¥Ìã∞Î∏å ÎîîÎ†âÌÑ∞', 'Ï¥àÎì±ÌïôÍµêÏóêÏÑú ÏïÑÏù¥Îì§ÏùÑ Í∞ÄÎ•¥ÏπòÎäî ÍµêÏÇ¨')\nüë• Ïô∏Î™®: (Î∞òÎìúÏãú Ïó¨Ïûê Ïó∞ÏòàÏù∏ÏúºÎ°úÎßå ÎπÑÏú†Ìï¥Ï£ºÏÑ∏Ïöî. ÏòàÏãú: ÏïÑÏù¥Ïú†, ÏàòÏßÄ, ÌïúÏÜåÌù¨, Ï†ÑÏßÄÌòÑ, ÏÜ°ÌòúÍµê, Î∞ïÎÇòÎûò, Ïû•ÎèÑÏó∞ Îì±ÏùÑ ÏÉÅÌô©Ïóê ÎßûÍ≤å Ï°∞Ìï©)\nüé≠ MBTI: (ÏÑ±Í≤©Ïú†ÌòïÏùÑ Ïû¨ÎØ∏ÏûàÎäî ÏÉÅÌô©Ïù¥ÎÇò ÌñâÎèôÍ≥º Ïó∞Í≤∞Ìï¥ÏÑú ÌëúÌòÑÌï¥Ï£ºÏÑ∏Ïöî)\n‚ú® ÏÑ±Í≤©: (ÏßÅÏóÖÏù¥ÎÇò MBTIÏôÄ Ïó∞Í¥ÄÎêú ÎèÖÌäπÌïú ÏÑ±Í≤©ÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî)\nüéØ Ï∑®ÎØ∏: (ÏßÅÏóÖÏù¥ÎÇò ÏÑ±Í≤©Í≥º Ïñ¥Ïö∏Î¶¨Îäî ÌòÑÏã§Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Ïû¨ÎØ∏ÏûàÎäî Ï∑®ÎØ∏Î•º ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî)\nüíù Ïó∞Ïï† Ïä§ÌÉÄÏùº: (ÏÑ±Í≤©Ïù¥ÎÇò Ï∑®ÎØ∏ÏôÄ Ïó∞Í¥ÄÎêú ÎèÖÌäπÌïú Ïó∞Ïï† Ïä§ÌÉÄÏùºÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî)";

        console.log('Sending request to OpenAI...');
        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: `ÎãπÏã†ÏùÄ Ïû¨ÎØ∏ÏûàÎäî Í≤∞ÌòºÏö¥ÏÑ∏ Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. ÏùëÎãµÏùÄ Î∞òÎìúÏãú ÏïÑÎûò ÌòïÏãùÏùò Ïù¥Î™®ÏßÄÏôÄ Ìï®Íªò ÏûëÏÑ±ÌïòÍ≥†, Í∞Å Ìï≠Î™©ÏùÄ Ï§ÑÎ∞îÍøà ÏóÜÏù¥ Ìïú Ï§ÑÎ°ú ÏûëÏÑ±Ìï¥Ïïº Ìï©ÎãàÎã§:

ÏòàÏãú ÌòïÏãù 1:
üíº ÏßÅÏóÖ: ÏùÄÌñâÏù¥ÎÇò Ï¶ùÍ∂åÏÇ¨ÏóêÏÑú ÏùºÌïòÎäî Í∏àÏúµÍ∂å ÏßÅÏû•Ïù∏
üë• Ïô∏Î™®: Î©ÄÎ¶¨ÏÑú Î≥¥Î©¥ Î•òÏ§ÄÏó¥, Í∞ÄÍπåÏù¥ÏÑú Î≥¥Î©¥ Ïú†Ïû¨ÏÑù, ÏòÜÎ™®ÏäµÏùÄ Ï∞®ÏùÄÏö∞ ÎãÆÏùå
üé≠ MBTI: Î∞• Î®πÏùÑ ÎïåÎèÑ ÏóëÏÖÄ ÏßúÎäî ISTJ, Í∞ÄÎÅî Ï¶âÌù•Ï†ÅÏúºÎ°ú Ïó¨Ìñâ Í∞ê
‚ú® ÏÑ±Í≤©: ÏãúÏãùÏΩîÎÑà ÌîÑÎ°ú ÏãúÏãùÎü¨, ÎßõÏßë Ï∂îÏ≤úÎèÑ ÏûòÌï®
üéØ Ï∑®ÎØ∏: Ï£ºÎßêÎßàÎã§ Îì±ÏÇ∞ ÌõÑ ÏπòÎß•, ÏÇ∞ÏóêÏÑú ÎßåÎÇú ÏÇ¨ÎûåÎì§Í≥º ÌååÌã∞Ìï®
üíù Ïó∞Ïï† Ïä§ÌÉÄÏùº: Í∏∞ÎÖêÏùºÎßàÎã§ ÍπúÏßù Ïù¥Î≤§Ìä∏ Ï§ÄÎπÑ, ÏÑ§Î†àÏÑú Ïä§Ìè¨Ìï¥Î≤ÑÎ¶º

ÏòàÏãú ÌòïÏãù 2:
üíº ÏßÅÏóÖ: Í≤åÏûÑÏóÖÍ≥ÑÏóêÏÑú ÏùºÌïòÎäî ÌîÑÎ°úÍ≤åÏù¥Î®∏
üë• Ïô∏Î™®: Î¨¥ÌëúÏ†ïÏùº Îïê Í≥µÏú†, ÏõÉÏùÑ Îïê Ïù¥ÏàòÍ∑º, ÌôîÎÇ† Îïê Î∞ïÎ™ÖÏàò ÎãÆÏùå
üé≠ MBTI: Í≤åÏûÑÌï† Îïê ÏßÑÏßÄÌïú INTJ, ÌèâÏÜåÏóî Ïû•ÎÇúÍæ∏Îü¨Í∏∞
‚ú® ÏÑ±Í≤©: Í≤åÏûÑ ÏïÑÏù¥ÌÖú ÏàòÏßëÍ¥ë, Î†àÏñ¥ ÏïÑÏù¥ÌÖú ÌååÎ∞ç Ïû•Ïù∏
üéØ Ï∑®ÎØ∏: PCÎ∞©ÏóêÏÑú Í≤åÏûÑ Ïä§Ìä∏Î¶¨Î∞ç, Ìå¨Îì§Í≥º ÏÜåÌÜµ ÏûòÌï®
üíù Ïó∞Ïï† Ïä§ÌÉÄÏùº: Í≤åÏûÑ ÏïÑÏù¥ÌÖúÏúºÎ°ú Í≥†Î∞±, Ïª§Ìîå Í≤åÏûÑ Ï¶êÍπÄ

ÏòàÏãú ÌòïÏãù 3:
üíº ÏßÅÏóÖ: ITÏóÖÍ≥ÑÏóêÏÑú ÏùºÌïòÎäî Í∞úÎ∞úÏûê
üë• Ïô∏Î™®: ÏïàÍ≤Ω Ïì∞Î©¥ Í∞ïÎã§ÎãàÏóò, Î≤óÏúºÎ©¥ Ï∞®ÏùÄÏö∞, ÏùºÌï† Îïê Î∞ïÎ™ÖÏàò ÎãÆÏùå
üé≠ MBTI: Î≤ÑÍ∑∏ Ïû°ÏùÑ Îïê ISTJ, ÌöåÏãùÏûêÎ¶¨ÏóêÏÑ† ENFP
‚ú® ÏÑ±Í≤©: ÏΩîÎìú Ï†ïÎ¶¨ Í∞ïÎ∞ïÏ¶ù, ÏïºÍ∑ºÌï† Îïå ÏóêÎÑàÏßÄ ÎìúÎßÅÌÅ¨ ÌïÑÏàò
üéØ Ï∑®ÎØ∏: ÌÇ§Î≥¥Îìú Ïª§Ïä§ÌÖÄ Ï†úÏûë, Í∏∞Í≥ÑÏãù ÌÇ§Î≥¥Îìú ÏàòÏßë
üíù Ïó∞Ïï†: Ïª§Î∞ã Î©îÏãúÏßÄÏ≤òÎüº ÏÜîÏßÅÌïú Í≥†Î∞±, Îç∞Ïù¥Ìä∏ ÏùºÏ†ï ÍπÉÌóàÎ∏åÎ°ú Í¥ÄÎ¶¨

Í∑úÏπô:
1. Í∞Å Ìï≠Î™©ÏùÄ Î∞òÎìúÏãú Ïù¥Î™®ÏßÄÎ°ú ÏãúÏûëÌïòÍ≥† ÏΩúÎ°†(:)ÏúºÎ°ú Íµ¨Î∂Ñ
2. Ïù¥Î™®ÏßÄÏôÄ Ìï≠Î™©Î™Ö ÏÇ¨Ïù¥Ïóê Î∂àÌïÑÏöîÌïú Í≥µÎ∞± ÏóÜÏù¥ Î∂ôÏó¨ÏÑú ÏûëÏÑ±
3. Î™®Îì† ÎÇ¥Ïö©ÏùÄ Ï§ÑÎ∞îÍøà ÏóÜÏù¥ Ìïú Ï§ÑÎ°ú ÏûëÏÑ±
4. ÏßÅÏóÖÏùÄ ÌïòÎÇòÏùò Î∂ÑÏïºÎßå ÏÑ†ÌÉùÌïòÍ≥† Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™Ö
5. Ïô∏Î™®, ÏÑ±Í≤©, Ï∑®ÎØ∏Îäî ÏßÅÏóÖÏù¥ÎÇò MBTIÏôÄ Ïó∞Í¥ÄÎêòÍ≤å ÏÑ§Ï†ï
6. '~ÌïòÎäî', '~Ï†ÅÏù∏' Í∞ôÏùÄ Î∂àÌïÑÏöîÌïú ÏàòÏãùÏñ¥ ÎåÄÏã† '~Ìï®', 'ÏûòÌï®' Îì± Í∞ÑÍ≤∞Ìïú ÌëúÌòÑ ÏÇ¨Ïö©
7. ÏÑ±Í≤©Í≥º Ï∑®ÎØ∏Îäî ÎèÖÌäπÌïòÍ≥† Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Î¨òÏÇ¨`
                },
                {
                    role: "user",
                    content: [
                        {
                            type: "text",
                            text: prompt
                        },
                        {
                            type: "image_url",
                            image_url: {
                                "url": imageData
                            }
                        }
                    ]
                }
            ],
            max_tokens: 500,
            temperature: 0.9
        });

        console.log('Received response from OpenAI');
        
        if (!completion.choices || !completion.choices[0] || !completion.choices[0].message) {
            console.error('Invalid API response structure:', completion);
            throw new Error('API ÏùëÎãµÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.');
        }

        const content = completion.choices[0].message.content;
        console.log('Analysis content:', content);

        // ÏùëÎãµ ÌòïÏãù Í≤ÄÏ¶ù - Î™®Îì† ÌïÑÏàò Ìï≠Î™©Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        const requiredElements = ['üíº ÏßÅÏóÖ:', 'üë• Ïô∏Î™®:', 'üé≠ MBTI:', '‚ú® ÏÑ±Í≤©:', 'üéØ Ï∑®ÎØ∏:', 'üíù Ïó∞Ïï† Ïä§ÌÉÄÏùº:'];
        const missingElements = requiredElements.filter(element => !content.includes(element));
        
        if (missingElements.length > 0) {
            console.error('Missing required elements:', missingElements);
            throw new Error('Î∂ÑÏÑù Í≤∞Í≥ºÏóê ÌïÑÏàò Ìï≠Î™©Ïù¥ ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§.');
        }

        // ÏßÅÏóÖ Ï†ïÎ≥¥ Ï∂îÏ∂ú
        const jobMatch = content.match(/üíº ÏßÅÏóÖ: (.+?)(?=\n|$)/);
        if (!jobMatch) {
            console.error('Could not extract job information');
            throw new Error('ÏßÅÏóÖ Ï†ïÎ≥¥Î•º Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
        }

        // ÏùëÎãµ Ï†ÑÏÜ°
        const formattedContent = content.split('\n')
            .filter(line => line.trim() !== '')
            .map(line => {
                const [emoji, ...rest] = line.split(' ');
                const label = rest[0].replace(':', '');
                const content = rest.slice(1).join(' ').trim();
                const className = label.toLowerCase() === 'mbti' ? 'mbti' : 
                                label.toLowerCase() === 'ÏßÅÏóÖ' ? 'job' : '';
                
                return `<div class="result-item ${className}">
                    <div class="title-wrapper">
                        <span class="emoji">${emoji}</span>
                        <span class="label">${label}</span>
                    </div>
                    <div class="content">${content}</div>
                </div>`;
            })
            .join('\n');

        res.json({ 
            analysis: formattedContent,
            job: jobMatch[1].trim()
        });
    } catch (error) {
        console.error('Error in /analyze-image:', error);
        res.status(error.status || 500).json({ 
            error: error.message || 'Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ïã§Î£®Ïó£ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/generate-silhouette', async (req, res) => {
    try {
        const { analysisType } = req.body;
        const defaultImage = analysisType === 'husband' ? 'husband.png' : 'wife.png';
        res.json({ imageUrl: defaultImage });
    } catch (error) {
        console.error('Error in silhouette selection:', error);
        const defaultImage = req.body.analysisType === 'husband' ? 'husband.png' : 'wife.png';
        res.json({ imageUrl: defaultImage });
    }
});

function getJobSpecificPrompt(jobCategory) {
    switch (jobCategory) {
        case 'tech':
            return '- Include computer setup and modern tech office environment\n- Show coding or technical work pose';
        case 'medical':
            return '- Include medical equipment or hospital setting\n- Show caring or diagnostic pose';
        case 'education':
            return '- Include classroom or teaching environment\n- Show teaching or presentation pose';
        case 'creative':
            return '- Include design tools or creative studio setting\n- Show creative or artistic pose';
        case 'finance':
            return '- Include financial district office setting\n- Show analysis or presentation pose';
        case 'government':
            return '- Include official office or public service setting\n- Show administrative or service pose';
        case 'culinary':
            return '- Include kitchen or restaurant setting\n- Show cooking or food preparation pose';
        case 'legal':
            return '- Include law office or courtroom setting\n- Show counseling or presentation pose';
        default:
            return '- Include modern office setting\n- Show professional working pose';
    }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log("Server is running at http://localhost:" + PORT);
}); 